#pragma kernel CSMain
 #include "./SimplexNoise.compute"

 

RWStructuredBuffer<float> DensityGrid; 
int _height;
int _width;
int _depth;
int3 _gridOffset;
int3 _noiseOffset;
float _lacunarity;
float _persistence;
int _octaves;
float _scale;
float _maxOverworldHeight;
float _overworldStartAt;
float _isoLevel;
float _hLacunarity;
float _hPersistence;
int _hOctaves;
float _hScale;
 
 

float noise2d(float2 coord)
{
    float noise = 0;
    float frequency = _hScale / 100;
    float amplitude = 1;

    for (int i = 0; i < _hOctaves; i++)
    {
        float n = SimplexNoise2D(coord * frequency) * 0.5f + 0.5f;
        noise += n * amplitude;

        amplitude *= _hPersistence;
        frequency *= _hLacunarity;
    }

    return noise;
}

 
float noise3d(float3 c)
{
    float noise = 0;
    float frequency = _scale / 100;
    float amplitude = 1;

    for (int i = 0; i < _octaves; i++)
    {
        float n = ClassicNoise(c * frequency) * 0.5f + 0.5f;
        noise += n * amplitude;

        amplitude *= _persistence;
        frequency *= _lacunarity;
    }

    return noise;
}


[numthreads(1024, 1, 1)]
void CSMain(int3 id : SV_DispatchThreadID)
{

    int3 idx;

    idx.z = id.x / (_width * _height);
    int remFromZ = id.x - (idx.z * _width * _height);
    idx.y = remFromZ / _width;
    idx.x = remFromZ % _width;


    int gidx = idx.x + (idx.y * _width) + (idx.z * _width * _height);
    int hmidx = idx.x + (idx.z * _width);


    float3 noisePos = float3(idx + _gridOffset + _noiseOffset);
    float3 worldPos = float3(idx + _gridOffset);
    float2 noisePos2 = float2(noisePos.x, noisePos.z);
    float3 noisePos2b = float3(noisePos.x, 0, noisePos.z);
     
    float noiseAtPt = noise3d(noisePos);
    float4 s; 
    
    //float heightAtPoint = noise2d(noisePos2) * _maxOverworldHeight;
    //float totalHeightAtPt = _overworldStartAt + heightAtPoint;
    
    //float baseHeightAtPt = noise2d(noisePos2) * 10.0f;
    //float baseOverWorldTotalHeightAtPt = _overworldStartAt + baseHeightAtPt;
    if (worldPos.y > (int) _overworldStartAt)
    { 

        noiseAtPt *= 1 - (_maxOverworldHeight - (worldPos.y - _overworldStartAt)) / _maxOverworldHeight;
    }

    //if (worldPos.y > (int) totalHeightAtPt - 1)
    //{
    //    float pt = worldPos.y - totalHeightAtPt;
    //    if (noiseAtPt > _isoLevel)
    //    {
    //        pt = noiseAtPt;
    //    }

    //    noiseAtPt = pt;
    //}
    //else if (abs(worldPos.y - baseOverWorldTotalHeightAtPt) <=1 )
    //{
    //    //noiseAtPt = min(noiseAtPt , _isoLevel-0.001f);
    //    float pt = worldPos.y - baseOverWorldTotalHeightAtPt;
    //    if (noiseAtPt < _isoLevel)
    //    {
    //        pt = noiseAtPt;
    //    }

    //    noiseAtPt = pt;
    //}
     
    DensityGrid[gidx] = noiseAtPt;
     
            
}